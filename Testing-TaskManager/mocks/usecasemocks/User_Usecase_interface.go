// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/Ermi9s.Golang-Learning-phase/Testing-TaskManager/domain"
	mock "github.com/stretchr/testify/mock"
)

// User_Usecase_interface is an autogenerated mock type for the User_Usecase_interface type
type User_Usecase_interface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: model
func (_m *User_Usecase_interface) CreateUser(model domain.User) (domain.User, error) {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (domain.User, error)); ok {
		return rf(model)
	}
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *User_Usecase_interface) DeleteUser(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: id
func (_m *User_Usecase_interface) GetUser(id string) (domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *User_Usecase_interface) GetUsers() ([]domain.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogIn provides a mock function with given fields: model
func (_m *User_Usecase_interface) LogIn(model domain.AuthUser) (domain.User, error) {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for LogIn")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AuthUser) (domain.User, error)); ok {
		return rf(model)
	}
	if rf, ok := ret.Get(0).(func(domain.AuthUser) domain.User); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.AuthUser) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: id
func (_m *User_Usecase_interface) Promote(id string) (domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, model
func (_m *User_Usecase_interface) UpdateUser(id string, model domain.User) (domain.User, error) {
	ret := _m.Called(id, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.User) (domain.User, error)); ok {
		return rf(id, model)
	}
	if rf, ok := ret.Get(0).(func(string, domain.User) domain.User); ok {
		r0 = rf(id, model)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, domain.User) error); ok {
		r1 = rf(id, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser_Usecase_interface creates a new instance of User_Usecase_interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser_Usecase_interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *User_Usecase_interface {
	mock := &User_Usecase_interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
